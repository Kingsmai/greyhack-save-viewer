cryptools = include_lib("/lib/crypto.so")
if not cryptools then
	cryptools = include_lib(current_path + "/crypto.so")
end if
if not cryptools then exit("Error: Can't find crypto.so library in the /lib path or the current folder")

GetPassword = function(userPass)
	if userPass.len != 2 then exit("decipher: " + file.path + " wrong syntax")
	password = cryptools.decipher(userPass[1])
	return password
end function

processFile = function(passwdFile)
	if not passwdFile then exit("decipher: can't find " + origFile)
	if passwdFile.is_binary then exit("decipher: can't read " + origFile + ". Binary file")
	if not passwdFile.has_permission("r") then exit("decipher: can't read file. Permission denied")
	if passwdFile.get_content.len == 0 then exit("decipher: no users found")

	lines = passwdFile.get_content.split("\n")
	password = null
	if lines.len == 1 then
		userPass = lines[0].split(":")
		password = GetPassword(userPass)
	else
		print("Multiple users found.")
		numLine = 1
		for line in lines
			if line.len > 0 then
				print(numLine + ": " + line)
				numLine = numLine + 1
			end if
		end for
		option = ""
		inputOk = false
		while( not inputOk )
			option = user_input("Select user: ").to_int
			if typeof(option) != "number" or (option < 1 or option > lines.len) then
				print("Invalid input. Type a valid number")
			else 
				inputOk = true
			end if
		end while
		
		userPass = lines[option - 1].split(":")
		print("Selected user: " + userPass[0] + "\nDeciphering...")
		password = GetPassword(userPass)
	end if
	if not password then exit("Can't find password :(")
	print("password found! => " + password)
end function

typeObject = typeof(result)
if typeObject != "computer" then exit("Error: expected computer, obtained " + typeObject)
file = result.File("/etc/passwd")
processFile(file)
