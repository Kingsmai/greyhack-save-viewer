extends Window

@onready var library_option_button: OptionButton = %LibraryOptionButton
@onready var version_line_edit: LineEdit = %VersionLineEdit
@onready var memory_zone_line_edit: LineEdit = %MemoryZoneLineEdit
@onready var unsec_value_line_edit: LineEdit = %UnsecValueLineEdit
@onready var bake_button: Button = %BakeButton

@onready var output_code_edit: CodeEdit = %OutputCodeEdit
@onready var suggest_name_line_edit: LineEdit = %SuggestNameLineEdit

@onready var shell_check_box: CheckBox = %ShellCheckBox
@onready var change_password_check_box: CheckBox = %ChangePasswordCheckBox
@onready var random_folder_check_box: CheckBox = %RandomFolderCheckBox
@onready var computer_hack_check_box: CheckBox = %ComputerHackCheckBox
@onready var firewall_disable_check_box: CheckBox = %FirewallDisableCheckBox
@onready var override_settings_check_box: CheckBox = %OverrideSettingsCheckBox

@onready var permission_guest_check_box: CheckBox = %PermissionGuestCheckBox
@onready var permission_non_root_check_box: CheckBox = %PermissionNonRootCheckBox
@onready var permission_root_check_box: CheckBox = %PermissionRootCheckBox

@onready var path_exists_line_edit: LineEdit = %PathExistsLineEdit
@onready var root_login_check_box: CheckBox = %RootLoginCheckBox
@onready var any_user_check_box: CheckBox = %AnyUserCheckBox
@onready var guest_login_check_box: CheckBox = %GuestLoginCheckBox
@onready var lib_req_option_button: OptionButton = %LibReqOptionButton
@onready var lib_ver_line_edit: LineEdit = %LibVerLineEdit
@onready var user_reg_count_line_edit: LineEdit = %UserRegCountLineEdit
@onready var port_fwd_count_line_edit: LineEdit = %PortFwdCountLineEdit
@onready var gateway_conn_count_line_edit: LineEdit = %GatewayConnCountLineEdit

@onready var folder_hack_content_check_box: CheckBox = %FolderHackContentCheckBox
@onready var folder_hack_content_line_edit: LineEdit = %FolderHackContentLineEdit
@onready var folder_hack_passwd_check_box: CheckBox = %FolderHackPasswdCheckBox
@onready var folder_hack_mail_check_box: CheckBox = %FolderHackMailCheckBox

@onready var computer_hack_passwd_check_box: CheckBox = %ComputerHackPasswdCheckBox
@onready var computer_hack_bank_check_box: CheckBox = %ComputerHackBankCheckBox
@onready var computer_hack_mail_check_box: CheckBox = %ComputerHackMailCheckBox

@onready var new_password_line_edit: LineEdit = %NewPasswordLineEdit

func _ready() -> void:
	library_option_button.clear()
	lib_req_option_button.add_item("Lib Req...")
	for lib in LibraryType.Type:
		var lib_file_name = LibraryType.translate(LibraryType.Type.get(lib))
		library_option_button.add_item(lib_file_name)
		lib_req_option_button.add_item(lib_file_name)
	library_option_button.item_selected.connect(_on_library_option_button_item_selected)
	var hack_result_buttons = shell_check_box.button_group.get_buttons()
	for hack_result_btn in hack_result_buttons:
		hack_result_btn.pressed.connect(_on_hack_result_check_box_pressed)
	bake_button.pressed.connect(_on_bake_button_pressed)
	# Initial State
	shell_check_box.button_pressed = true
	permission_guest_check_box.button_pressed = true
	folder_hack_content_check_box.button_pressed = true
	computer_hack_passwd_check_box.button_pressed = true
	firewall_disable_check_box.disabled = library_option_button.selected != LibraryType.Type.KERNEL_ROUTER
	override_settings_check_box.disabled = library_option_button.selected != LibraryType.Type.LIB_SMART_APPLIANCE
	_on_hack_result_check_box_pressed()
	self.hide()

func get_version_array() -> Array[int]:
	var version_str = version_line_edit.text
	var version_array = version_str.split(".")
	var result: Array[int] = []
	if version_array.size() != 3:
		return []
	for version_num in version_array:
		if not version_num.is_valid_int():
			return []
		result.append(version_num.to_int())
	return result

func _on_library_option_button_item_selected(idx: int) -> void:
	firewall_disable_check_box.disabled = idx != LibraryType.Type.KERNEL_ROUTER
	override_settings_check_box.disabled = idx != LibraryType.Type.LIB_SMART_APPLIANCE

func _on_hack_result_check_box_pressed() -> void:
	var folder_hack_buttons = folder_hack_content_check_box.button_group.get_buttons()
	for folder_hack_btn in folder_hack_buttons:
		folder_hack_btn.disabled = !random_folder_check_box.button_pressed
	folder_hack_content_line_edit.editable = random_folder_check_box.button_pressed
	var computer_hack_buttons = computer_hack_passwd_check_box.button_group.get_buttons()
	for computer_hack_btn in computer_hack_buttons:
		computer_hack_btn.disabled = !computer_hack_check_box.button_pressed
	new_password_line_edit.editable = change_password_check_box.button_pressed

func _on_bake_button_pressed() -> void:
	var lib: Lib = Lib.new()
	lib.id_lib = library_option_button.selected
	lib.version = LibVersion.new()
	var version_array = get_version_array()
	if version_array.size() == 0:
		return
	lib.version.version = version_array
	var memory_zone: MemoryZone = MemoryZone.new()
	memory_zone.address = memory_zone_line_edit.text
	var vuln: Vulnerability = Vulnerability.new()
	vuln.helper_hack_result = HelperHackResult.new()
	vuln.unsec_value = unsec_value_line_edit.text
	# Set Required
	vuln.required_actions = []
	if not path_exists_line_edit.text.strip_edges().is_empty():
		vuln.required_actions.append(HackRequiredType.Type.PATH_EXIST)
		vuln.helper_hack_result.path_exist = path_exists_line_edit.text
	if root_login_check_box.button_pressed:
		vuln.required_actions.append(HackRequiredType.Type.ROOT_ACTIVE_USER)
	if any_user_check_box.button_pressed:
		vuln.required_actions.append(HackRequiredType.Type.ANY_ACTIVE_USER)
	if guest_login_check_box.button_pressed:
		vuln.required_actions.append(HackRequiredType.Type.GUEST_ACTIVE_USER)
	if lib_req_option_button.selected > 0:
		vuln.required_actions.append(HackRequiredType.Type.LIBRARY)
		vuln.required_lib = lib_req_option_button.selected - 1
		vuln.req_lib_version = lib_ver_line_edit.text
	if not user_reg_count_line_edit.text.strip_edges().is_empty():
		vuln.required_actions.append(HackRequiredType.Type.NUMBER_USERS_REGISTER)
		vuln.helper_hack_result.num_register_users = user_reg_count_line_edit.text.to_int()
	if not port_fwd_count_line_edit.text.strip_edges().is_empty():
		vuln.required_actions.append(HackRequiredType.Type.PORT_FORWARD)
		vuln.helper_hack_result.num_port_forward = port_fwd_count_line_edit.text.to_int()
	if not gateway_conn_count_line_edit.text.strip_edges().is_empty():
		vuln.required_actions.append(HackRequiredType.Type.CONN_GATEWAY)
		vuln.helper_hack_result.num_conn_gateway = gateway_conn_count_line_edit.text.to_int()
	# Set hack result type
	if shell_check_box.button_pressed:
		vuln.helper_hack_result.hack_result = HackResultType.Type.SHELL
	elif computer_hack_check_box.button_pressed:
		vuln.helper_hack_result.hack_result = HackResultType.Type.COMPUTER
	elif random_folder_check_box.button_pressed:
		vuln.helper_hack_result.hack_result = HackResultType.Type.RANDOM_FOLDER
	elif change_password_check_box.button_pressed:
		vuln.helper_hack_result.hack_result = HackResultType.Type.CHANGE_PASS
	elif override_settings_check_box.button_pressed:
		vuln.helper_hack_result.hack_result = HackResultType.Type.OVERRIDE_SETTINGS
	elif firewall_disable_check_box.button_pressed:
		vuln.helper_hack_result.hack_result = HackResultType.Type.FIREWALL_DISABLE
	# Set computer hack type
	var computer_hack: ExploitBuilder.ComputerHack
	if computer_hack_passwd_check_box.button_pressed:
		computer_hack = ExploitBuilder.ComputerHack.DECIPHER_PASSWD
	elif computer_hack_mail_check_box.button_pressed:
		computer_hack = ExploitBuilder.ComputerHack.DECIPHER_MAIL
	elif computer_hack_bank_check_box.button_pressed:
		computer_hack = ExploitBuilder.ComputerHack.DECIPHER_BANK
	# Set folder hack type
	var folder_hack: ExploitBuilder.FolderHack
	if folder_hack_content_check_box.button_pressed:
		folder_hack = ExploitBuilder.FolderHack.CONTENT
		vuln.helper_hack_result.random_path = "/lib" if folder_hack_content_line_edit.text.strip_edges().is_empty() else folder_hack_content_line_edit.text
	elif folder_hack_passwd_check_box.button_pressed:
		folder_hack = ExploitBuilder.FolderHack.ETC_PASSWD
	elif folder_hack_mail_check_box.button_pressed:
		folder_hack = ExploitBuilder.FolderHack.MAIL
	var new_password: String = ""
	if change_password_check_box.button_pressed:
		new_password = new_password_line_edit.text.strip_edges()
	var source_code = ExploitBuilder.build_exploit(lib, memory_zone, vuln, computer_hack, folder_hack, new_password)
	var suggested_name = ExploitBuilder.get_suggested_script_name(vuln, lib, folder_hack, computer_hack)
	output_code_edit.text = source_code
	suggest_name_line_edit.text = suggested_name

func _notification(what: int) -> void:
	if what == NOTIFICATION_WM_CLOSE_REQUEST:
		hide()

func _input(event: InputEvent) -> void:
	if event.is_action_pressed("exploit_builder"):
		visible = !visible
