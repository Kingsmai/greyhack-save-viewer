# ------------------------------------------------
# Class Name: ExploitsViewer
# Class Description:
# ------------------------------------------------
class_name ExploitsViewer extends MarginContainer

@onready var library_tree: Tree = %LibraryTree

@onready var exploit_name_line_edit: LineEdit = %ExploitNameLineEdit
@onready var memory_zone_address_line_edit: LineEdit = %MemoryZoneAddressLineEdit
@onready var library_name_line_edit: LineEdit = %LibraryNameLineEdit
@onready var part_selected_line_edit: LineEdit = %PartSelectedLineEdit
@onready var library_version_line_edit: LineEdit = %LibraryVersionLineEdit
@onready var price_line_edit: LineEdit = %PriceLineEdit
@onready var description_line_edit: RichTextLabel = %DescriptionLineEdit

@onready var vulnerability_container: VulnerabilityContainer = %VulnerabilityContainer

func _ready() -> void:
	GreyHack.world_info_load.connect(_on_world_info_loaded)
	library_tree.hide_root = true
	library_tree.item_selected.connect(_on_library_tree_selected)

func _on_world_info_loaded(world_info: WorldInfo) -> void:
	_clear_all_fields()
	if world_info == null:
		return
	var exploits = world_info.exploits
	var root = library_tree.create_item()

	for lib in exploits:
		var lib_entry = root.create_child()
		lib_entry.collapsed = true
		lib_entry.set_selectable(0, false)
		lib_entry.set_text(0, lib)

		var versions = exploits[lib]
		for version in versions:
			var version_entry = lib_entry.create_child()
			version_entry.collapsed = true
			version_entry.set_selectable(0, false)
			version_entry.set_text(0, version)

			var exploit_list = versions[version]
			for exploit in exploit_list:
				var exploit_entry = version_entry.create_child()
				exploit_entry.set_text(0, exploit.exploit_name)
				exploit_entry.set_metadata(0, exploit)

func _on_library_tree_selected() -> void:
	var selected_exploit: Exploit = library_tree.get_selected().get_metadata(0)
	exploit_name_line_edit.text = selected_exploit.exploit_name
	memory_zone_address_line_edit.text = selected_exploit.mem_zone_address
	library_name_line_edit.text = selected_exploit.lib_name
	library_version_line_edit.text = selected_exploit.lib_version.version_str
	part_selected_line_edit.text = ExploitPartSelectedType.translate(selected_exploit.part_selected)
	price_line_edit.text = str(selected_exploit.price)
	description_line_edit.text = selected_exploit.description_bbcode
	var vulnerability := selected_exploit.vulnerab
	vulnerability_container.load_vulnerability_contents(vulnerability)

func _clear_all_fields():
	library_tree.clear()
	exploit_name_line_edit.text = ""
	memory_zone_address_line_edit.text = ""
	library_name_line_edit.text = ""
	part_selected_line_edit.text = ""
	library_version_line_edit.text = ""
	price_line_edit.text = ""
	description_line_edit.text = ""
	vulnerability_container.reset_vulnerability_contents()
